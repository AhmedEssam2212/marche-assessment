generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for roles in the game
enum Role {
  PLAYER
  HOST
}

// Enum for game statuses
enum GameStatus {
  WAITING
  IN_PROGRESS
  FINISHED
}

// User model represents a player or host in the system
model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  password    String
  role        Role
  games       Game[]        @relation("PlayerGames")
  hostedGames Game[]        @relation("HostGames") // Add this field for the "HostGames" relation
  leaderboard Leaderboard[]
}

// Game model represents a game session
model Game {
  id             Int              @id @default(autoincrement())
  hostId         Int
  host           User             @relation("HostGames", fields: [hostId], references: [id])
  maxPlayers     Int?
  currentPlayers Int              @default(1)
  status         GameStatus       @default(WAITING)
  players        User[]           @relation("PlayerGames")
  questions      Question[]
  scores         Leaderboard[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

// Question model represents a trivia question in the game
model Question {
  id            Int      @id @default(autoincrement())
  gameId        Int
  game          Game     @relation(fields: [gameId], references: [id])
  question      String
  options       String[]
  correctAnswer String
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Leaderboard model tracks player scores for a game
model Leaderboard {
  id        Int      @id @default(autoincrement())
  gameId    Int
  userId  Int
  game      Game     @relation(fields: [gameId], references: [id])
  player    User     @relation(fields: [userId], references: [id])
  score     Int      @default(0)
  @@unique([gameId, userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
